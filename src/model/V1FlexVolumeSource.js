/**
 * Kibernetika project, backend component
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.2
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.8
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/V1LocalObjectReference'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./V1LocalObjectReference'));
  } else {
    // Browser globals (root is window)
    if (!root.KibernetikaProjectBackendComponent) {
      root.KibernetikaProjectBackendComponent = {};
    }
    root.KibernetikaProjectBackendComponent.V1FlexVolumeSource = factory(root.KibernetikaProjectBackendComponent.ApiClient, root.KibernetikaProjectBackendComponent.V1LocalObjectReference);
  }
}(this, function(ApiClient, V1LocalObjectReference) {
  'use strict';




  /**
   * The V1FlexVolumeSource model module.
   * @module model/V1FlexVolumeSource
   * @version 0.2
   */

  /**
   * Constructs a new <code>V1FlexVolumeSource</code>.
   * FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin. This is an alpha feature and may change in future.
   * @alias module:model/V1FlexVolumeSource
   * @class
   * @param driver {String} Driver is the name of the driver to use for this volume.
   */
  var exports = function(driver) {
    var _this = this;



    _this['driver'] = driver;


  };

  /**
   * Constructs a <code>V1FlexVolumeSource</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/V1FlexVolumeSource} obj Optional instance to populate.
   * @return {module:model/V1FlexVolumeSource} The populated <code>V1FlexVolumeSource</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('secretRef')) {
        obj['secretRef'] = V1LocalObjectReference.constructFromObject(data['secretRef']);
      }
      if (data.hasOwnProperty('readOnly')) {
        obj['readOnly'] = ApiClient.convertToType(data['readOnly'], 'Boolean');
      }
      if (data.hasOwnProperty('driver')) {
        obj['driver'] = ApiClient.convertToType(data['driver'], 'String');
      }
      if (data.hasOwnProperty('options')) {
        obj['options'] = ApiClient.convertToType(data['options'], {'String': 'String'});
      }
      if (data.hasOwnProperty('fsType')) {
        obj['fsType'] = ApiClient.convertToType(data['fsType'], 'String');
      }
    }
    return obj;
  }

  /**
   * Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
   * @member {module:model/V1LocalObjectReference} secretRef
   */
  exports.prototype['secretRef'] = undefined;
  /**
   * Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
   * @member {Boolean} readOnly
   */
  exports.prototype['readOnly'] = undefined;
  /**
   * Driver is the name of the driver to use for this volume.
   * @member {String} driver
   */
  exports.prototype['driver'] = undefined;
  /**
   * Optional: Extra command options if any.
   * @member {Object.<String, String>} options
   */
  exports.prototype['options'] = undefined;
  /**
   * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". The default filesystem depends on FlexVolume script.
   * @member {String} fsType
   */
  exports.prototype['fsType'] = undefined;



  return exports;
}));


