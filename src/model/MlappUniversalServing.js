/**
 * Kibernetika project, backend component
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.2
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.8
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/MlappAutoscale', 'model/MlappEnv', 'model/MlappImages', 'model/MlappPort', 'model/MlappResourceRequest', 'model/MlappServingSpec', 'model/MlappVolume', 'model/MlappVolumeMount'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./MlappAutoscale'), require('./MlappEnv'), require('./MlappImages'), require('./MlappPort'), require('./MlappResourceRequest'), require('./MlappServingSpec'), require('./MlappVolume'), require('./MlappVolumeMount'));
  } else {
    // Browser globals (root is window)
    if (!root.KibernetikaProjectBackendComponent) {
      root.KibernetikaProjectBackendComponent = {};
    }
    root.KibernetikaProjectBackendComponent.MlappUniversalServing = factory(root.KibernetikaProjectBackendComponent.ApiClient, root.KibernetikaProjectBackendComponent.MlappAutoscale, root.KibernetikaProjectBackendComponent.MlappEnv, root.KibernetikaProjectBackendComponent.MlappImages, root.KibernetikaProjectBackendComponent.MlappPort, root.KibernetikaProjectBackendComponent.MlappResourceRequest, root.KibernetikaProjectBackendComponent.MlappServingSpec, root.KibernetikaProjectBackendComponent.MlappVolume, root.KibernetikaProjectBackendComponent.MlappVolumeMount);
  }
}(this, function(ApiClient, MlappAutoscale, MlappEnv, MlappImages, MlappPort, MlappResourceRequest, MlappServingSpec, MlappVolume, MlappVolumeMount) {
  'use strict';




  /**
   * The MlappUniversalServing model module.
   * @module model/MlappUniversalServing
   * @version 0.2
   */

  /**
   * Constructs a new <code>MlappUniversalServing</code>.
   * @alias module:model/MlappUniversalServing
   * @class
   * @param skipPrefix {Boolean} 
   * @param disabled {Boolean} 
   */
  var exports = function(skipPrefix, disabled) {
    var _this = this;

    _this['skipPrefix'] = skipPrefix;

    _this['disabled'] = disabled;


























  };

  /**
   * Constructs a <code>MlappUniversalServing</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/MlappUniversalServing} obj Optional instance to populate.
   * @return {module:model/MlappUniversalServing} The populated <code>MlappUniversalServing</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('skipPrefix')) {
        obj['skipPrefix'] = ApiClient.convertToType(data['skipPrefix'], 'Boolean');
      }
      if (data.hasOwnProperty('labels')) {
        obj['labels'] = ApiClient.convertToType(data['labels'], {'String': 'String'});
      }
      if (data.hasOwnProperty('disabled')) {
        obj['disabled'] = ApiClient.convertToType(data['disabled'], 'Boolean');
      }
      if (data.hasOwnProperty('default_volume_mapping')) {
        obj['default_volume_mapping'] = ApiClient.convertToType(data['default_volume_mapping'], 'Boolean');
      }
      if (data.hasOwnProperty('images')) {
        obj['images'] = MlappImages.constructFromObject(data['images']);
      }
      if (data.hasOwnProperty('workspace_id')) {
        obj['workspace_id'] = ApiClient.convertToType(data['workspace_id'], 'String');
      }
      if (data.hasOwnProperty('workDir')) {
        obj['workDir'] = ApiClient.convertToType(data['workDir'], 'String');
      }
      if (data.hasOwnProperty('autoscale')) {
        obj['autoscale'] = MlappAutoscale.constructFromObject(data['autoscale']);
      }
      if (data.hasOwnProperty('default_mount_path')) {
        obj['default_mount_path'] = ApiClient.convertToType(data['default_mount_path'], 'String');
      }
      if (data.hasOwnProperty('front_api')) {
        obj['front_api'] = ApiClient.convertToType(data['front_api'], 'String');
      }
      if (data.hasOwnProperty('build')) {
        obj['build'] = ApiClient.convertToType(data['build'], 'String');
      }
      if (data.hasOwnProperty('env')) {
        obj['env'] = ApiClient.convertToType(data['env'], [MlappEnv]);
      }
      if (data.hasOwnProperty('nodes')) {
        obj['nodes'] = ApiClient.convertToType(data['nodes'], 'String');
      }
      if (data.hasOwnProperty('type')) {
        obj['type'] = ApiClient.convertToType(data['type'], 'String');
      }
      if (data.hasOwnProperty('spec')) {
        obj['spec'] = MlappServingSpec.constructFromObject(data['spec']);
      }
      if (data.hasOwnProperty('resources')) {
        obj['resources'] = MlappResourceRequest.constructFromObject(data['resources']);
      }
      if (data.hasOwnProperty('model_id')) {
        obj['model_id'] = ApiClient.convertToType(data['model_id'], 'String');
      }
      if (data.hasOwnProperty('workspace')) {
        obj['workspace'] = ApiClient.convertToType(data['workspace'], 'String');
      }
      if (data.hasOwnProperty('replicas')) {
        obj['replicas'] = ApiClient.convertToType(data['replicas'], 'Number');
      }
      if (data.hasOwnProperty('args')) {
        obj['args'] = ApiClient.convertToType(data['args'], 'String');
      }
      if (data.hasOwnProperty('taskName')) {
        obj['taskName'] = ApiClient.convertToType(data['taskName'], 'String');
      }
      if (data.hasOwnProperty('name')) {
        obj['name'] = ApiClient.convertToType(data['name'], 'String');
      }
      if (data.hasOwnProperty('displayName')) {
        obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
      }
      if (data.hasOwnProperty('build_info')) {
        obj['build_info'] = ApiClient.convertToType(data['build_info'], Object);
      }
      if (data.hasOwnProperty('sources')) {
        obj['sources'] = ApiClient.convertToType(data['sources'], [MlappVolume]);
      }
      if (data.hasOwnProperty('command')) {
        obj['command'] = ApiClient.convertToType(data['command'], 'String');
      }
      if (data.hasOwnProperty('volumes')) {
        obj['volumes'] = ApiClient.convertToType(data['volumes'], [MlappVolumeMount]);
      }
      if (data.hasOwnProperty('model')) {
        obj['model'] = ApiClient.convertToType(data['model'], 'String');
      }
      if (data.hasOwnProperty('ports')) {
        obj['ports'] = ApiClient.convertToType(data['ports'], [MlappPort]);
      }
    }
    return obj;
  }

  /**
   * @member {Boolean} skipPrefix
   */
  exports.prototype['skipPrefix'] = undefined;
  /**
   * @member {Object.<String, String>} labels
   */
  exports.prototype['labels'] = undefined;
  /**
   * @member {Boolean} disabled
   */
  exports.prototype['disabled'] = undefined;
  /**
   * @member {Boolean} default_volume_mapping
   */
  exports.prototype['default_volume_mapping'] = undefined;
  /**
   * @member {module:model/MlappImages} images
   */
  exports.prototype['images'] = undefined;
  /**
   * @member {String} workspace_id
   */
  exports.prototype['workspace_id'] = undefined;
  /**
   * @member {String} workDir
   */
  exports.prototype['workDir'] = undefined;
  /**
   * @member {module:model/MlappAutoscale} autoscale
   */
  exports.prototype['autoscale'] = undefined;
  /**
   * @member {String} default_mount_path
   */
  exports.prototype['default_mount_path'] = undefined;
  /**
   * @member {String} front_api
   */
  exports.prototype['front_api'] = undefined;
  /**
   * @member {String} build
   */
  exports.prototype['build'] = undefined;
  /**
   * @member {Array.<module:model/MlappEnv>} env
   */
  exports.prototype['env'] = undefined;
  /**
   * @member {String} nodes
   */
  exports.prototype['nodes'] = undefined;
  /**
   * @member {String} type
   */
  exports.prototype['type'] = undefined;
  /**
   * @member {module:model/MlappServingSpec} spec
   */
  exports.prototype['spec'] = undefined;
  /**
   * @member {module:model/MlappResourceRequest} resources
   */
  exports.prototype['resources'] = undefined;
  /**
   * @member {String} model_id
   */
  exports.prototype['model_id'] = undefined;
  /**
   * @member {String} workspace
   */
  exports.prototype['workspace'] = undefined;
  /**
   * @member {Number} replicas
   */
  exports.prototype['replicas'] = undefined;
  /**
   * @member {String} args
   */
  exports.prototype['args'] = undefined;
  /**
   * @member {String} taskName
   */
  exports.prototype['taskName'] = undefined;
  /**
   * @member {String} name
   */
  exports.prototype['name'] = undefined;
  /**
   * @member {String} displayName
   */
  exports.prototype['displayName'] = undefined;
  /**
   * @member {Object} build_info
   */
  exports.prototype['build_info'] = undefined;
  /**
   * @member {Array.<module:model/MlappVolume>} sources
   */
  exports.prototype['sources'] = undefined;
  /**
   * @member {String} command
   */
  exports.prototype['command'] = undefined;
  /**
   * @member {Array.<module:model/MlappVolumeMount>} volumes
   */
  exports.prototype['volumes'] = undefined;
  /**
   * @member {String} model
   */
  exports.prototype['model'] = undefined;
  /**
   * @member {Array.<module:model/MlappPort>} ports
   */
  exports.prototype['ports'] = undefined;



  return exports;
}));


