/**
 * Kibernetika project, backend component
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.2
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.8
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.KibernetikaProjectBackendComponent) {
      root.KibernetikaProjectBackendComponent = {};
    }
    root.KibernetikaProjectBackendComponent.MlappGitRepoVolumeSource = factory(root.KibernetikaProjectBackendComponent.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The MlappGitRepoVolumeSource model module.
   * @module model/MlappGitRepoVolumeSource
   * @version 0.2
   */

  /**
   * Constructs a new <code>MlappGitRepoVolumeSource</code>.
   * Represents a volume that is populated with the contents of a git repository. Git repo volumes do not support ownership management. Git repo volumes support SELinux relabeling.
   * @alias module:model/MlappGitRepoVolumeSource
   * @class
   * @param repository {String} Repository URL
   */
  var exports = function(repository) {
    var _this = this;


    _this['repository'] = repository;





  };

  /**
   * Constructs a <code>MlappGitRepoVolumeSource</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/MlappGitRepoVolumeSource} obj Optional instance to populate.
   * @return {module:model/MlappGitRepoVolumeSource} The populated <code>MlappGitRepoVolumeSource</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('private_key')) {
        obj['private_key'] = ApiClient.convertToType(data['private_key'], 'String');
      }
      if (data.hasOwnProperty('repository')) {
        obj['repository'] = ApiClient.convertToType(data['repository'], 'String');
      }
      if (data.hasOwnProperty('access_token')) {
        obj['access_token'] = ApiClient.convertToType(data['access_token'], 'String');
      }
      if (data.hasOwnProperty('directory')) {
        obj['directory'] = ApiClient.convertToType(data['directory'], 'String');
      }
      if (data.hasOwnProperty('accountId')) {
        obj['accountId'] = ApiClient.convertToType(data['accountId'], 'String');
      }
      if (data.hasOwnProperty('user_name')) {
        obj['user_name'] = ApiClient.convertToType(data['user_name'], 'String');
      }
      if (data.hasOwnProperty('revision')) {
        obj['revision'] = ApiClient.convertToType(data['revision'], 'String');
      }
    }
    return obj;
  }

  /**
   * @member {String} private_key
   */
  exports.prototype['private_key'] = undefined;
  /**
   * Repository URL
   * @member {String} repository
   */
  exports.prototype['repository'] = undefined;
  /**
   * @member {String} access_token
   */
  exports.prototype['access_token'] = undefined;
  /**
   * Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
   * @member {String} directory
   */
  exports.prototype['directory'] = undefined;
  /**
   * @member {String} accountId
   */
  exports.prototype['accountId'] = undefined;
  /**
   * @member {String} user_name
   */
  exports.prototype['user_name'] = undefined;
  /**
   * Commit hash for the specified revision.
   * @member {String} revision
   */
  exports.prototype['revision'] = undefined;



  return exports;
}));


