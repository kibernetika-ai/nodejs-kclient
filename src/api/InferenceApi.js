/**
 * Kibernetika project, backend component
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.2
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.8
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/InferenceRunServingRequest', 'model/ModelsInferenceVersion', 'model/ModelsServing'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/InferenceRunServingRequest'), require('../model/ModelsInferenceVersion'), require('../model/ModelsServing'));
  } else {
    // Browser globals (root is window)
    if (!root.KibernetikaProjectBackendComponent) {
      root.KibernetikaProjectBackendComponent = {};
    }
    root.KibernetikaProjectBackendComponent.InferenceApi = factory(root.KibernetikaProjectBackendComponent.ApiClient, root.KibernetikaProjectBackendComponent.InferenceRunServingRequest, root.KibernetikaProjectBackendComponent.ModelsInferenceVersion, root.KibernetikaProjectBackendComponent.ModelsServing);
  }
}(this, function(ApiClient, InferenceRunServingRequest, ModelsInferenceVersion, ModelsServing) {
  'use strict';

  /**
   * Inference service.
   * @module api/InferenceApi
   * @version 0.2
   */

  /**
   * Constructs a new InferenceApi. 
   * @alias module:api/InferenceApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the inferenceInferenceVersionDelete operation.
     * @callback module:api/InferenceApi~inferenceInferenceVersionDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete inference&#39;s version
     * @param {String} workspace Workspace&#39;s name
     * @param {String} inference Item&#39;s name (Inference)
     * @param {String} version Inference&#39;s version
     * @param {module:api/InferenceApi~inferenceInferenceVersionDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.inferenceInferenceVersionDelete = function(workspace, inference, version, callback) {
      var postBody = null;

      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling inferenceInferenceVersionDelete");
      }

      // verify the required parameter 'inference' is set
      if (inference === undefined || inference === null) {
        throw new Error("Missing the required parameter 'inference' when calling inferenceInferenceVersionDelete");
      }

      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling inferenceInferenceVersionDelete");
      }


      var pathParams = {
        'workspace': workspace,
        'inference': inference,
        'version': version
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v0.2/workspace/{workspace}/inference/{inference}/versions/{version}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the inferenceInferenceVersionInfo operation.
     * @callback module:api/InferenceApi~inferenceInferenceVersionInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsInferenceVersion} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return inference&#39;s info for specified version
     * @param {String} workspace Workspace&#39;s name
     * @param {String} inference Item&#39;s name (Inference)
     * @param {String} version Inference&#39;s version
     * @param {module:api/InferenceApi~inferenceInferenceVersionInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelsInferenceVersion}
     */
    this.inferenceInferenceVersionInfo = function(workspace, inference, version, callback) {
      var postBody = null;

      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling inferenceInferenceVersionInfo");
      }

      // verify the required parameter 'inference' is set
      if (inference === undefined || inference === null) {
        throw new Error("Missing the required parameter 'inference' when calling inferenceInferenceVersionInfo");
      }

      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling inferenceInferenceVersionInfo");
      }


      var pathParams = {
        'workspace': workspace,
        'inference': inference,
        'version': version
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ModelsInferenceVersion;

      return this.apiClient.callApi(
        '/api/v0.2/workspace/{workspace}/inference/{inference}/versions/{version}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the inferenceInferenceVersionStart operation.
     * @callback module:api/InferenceApi~inferenceInferenceVersionStartCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsServing} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Starts serving
     * @param {module:model/InferenceRunServingRequest} body 
     * @param {String} workspace Workspace&#39;s name
     * @param {String} inference Item&#39;s name (Inference)
     * @param {String} version Inference&#39;s version
     * @param {module:api/InferenceApi~inferenceInferenceVersionStartCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelsServing}
     */
    this.inferenceInferenceVersionStart = function(body, workspace, inference, version, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling inferenceInferenceVersionStart");
      }

      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling inferenceInferenceVersionStart");
      }

      // verify the required parameter 'inference' is set
      if (inference === undefined || inference === null) {
        throw new Error("Missing the required parameter 'inference' when calling inferenceInferenceVersionStart");
      }

      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling inferenceInferenceVersionStart");
      }


      var pathParams = {
        'workspace': workspace,
        'inference': inference,
        'version': version
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ModelsServing;

      return this.apiClient.callApi(
        '/api/v0.2/workspace/{workspace}/inference/{inference}/versions/{version}/start', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the inferenceInferenceVersionUpdate operation.
     * @callback module:api/InferenceApi~inferenceInferenceVersionUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsInferenceVersion} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update inference&#39;s info for specified version
     * @param {module:model/ModelsInferenceVersion} body 
     * @param {String} workspace Workspace&#39;s name
     * @param {String} inference Item&#39;s name (Inference)
     * @param {String} version Inference&#39;s version
     * @param {module:api/InferenceApi~inferenceInferenceVersionUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelsInferenceVersion}
     */
    this.inferenceInferenceVersionUpdate = function(body, workspace, inference, version, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling inferenceInferenceVersionUpdate");
      }

      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling inferenceInferenceVersionUpdate");
      }

      // verify the required parameter 'inference' is set
      if (inference === undefined || inference === null) {
        throw new Error("Missing the required parameter 'inference' when calling inferenceInferenceVersionUpdate");
      }

      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling inferenceInferenceVersionUpdate");
      }


      var pathParams = {
        'workspace': workspace,
        'inference': inference,
        'version': version
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ModelsInferenceVersion;

      return this.apiClient.callApi(
        '/api/v0.2/workspace/{workspace}/inference/{inference}/versions/{version}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
